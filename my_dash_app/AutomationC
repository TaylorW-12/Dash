import os
import zipfile
import rarfile
import shutil
from pathlib import Path
import mimetypes
from PIL import Image
import PyPDF2
import docx
from docx import Document
import openpyxl
from openpyxl import load_workbook
import json
import xml.etree.ElementTree as ET
import csv
import sqlite3
import tempfile
import logging
from typing import List, Dict, Any
import magic  # python-magic for file type detection

class RARAnalyzer:
    def __init__(self, rar_path: str, output_dir: str = None):
        self.rar_path = rar_path
        self.output_dir = output_dir or f"{rar_path}_extracted"
        self.extracted_files = []
        self.embedded_content = []
        
        # Setup logging
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)
        
        # Create output directory
        Path(self.output_dir).mkdir(exist_ok=True)
        
    def extract_rar(self):
        """Extract RAR file contents"""
        try:
            with rarfile.RarFile(self.rar_path) as rf:
                rf.extractall(self.output_dir)
                self.logger.info(f"RAR extracted to: {self.output_dir}")
                return True
        except Exception as e:
            self.logger.error(f"Error extracting RAR: {e}")
            return False
    
    def scan_directory(self, directory: str) -> List[Dict[str, Any]]:
        """Recursively scan directory and catalog all files"""
        files_info = []
        
        for root, dirs, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                relative_path = os.path.relpath(file_path, directory)
                
                try:
                    # Get file info
                    file_stat = os.stat(file_path)
                    file_info = {
                        'name': file,
                        'path': file_path,
                        'relative_path': relative_path,
                        'size': file_stat.st_size,
                        'extension': Path(file).suffix.lower(),
                        'mime_type': mimetypes.guess_type(file_path)[0],
                        'embedded_content': []
                    }
                    
                    # Detect file type using magic
                    try:
                        file_info['detected_type'] = magic.from_file(file_path, mime=True)
                    except:
                        file_info['detected_type'] = 'unknown'
                    
                    files_info.append(file_info)
                    
                except Exception as e:
                    self.logger.error(f"Error processing file {file_path}: {e}")
        
        return files_info
    
    def extract_from_pdf(self, file_path: str) -> List[Dict[str, Any]]:
        """Extract images and attachments from PDF files"""
        embedded_items = []
        
        try:
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                
                # Extract text content info
                text_content = ""
                for page in pdf_reader.pages:
                    text_content += page.extract_text()
                
                if text_content.strip():
                    embedded_items.append({
                        'type': 'text_content',
                        'description': f'Text content ({len(text_content)} characters)',
                        'location': 'PDF pages',
                        'extractable': True
                    })
                
                # Check for embedded files (this is limited in PyPDF2)
                if hasattr(pdf_reader, 'attachments'):
                    for attachment in pdf_reader.attachments:
                        embedded_items.append({
                            'type': 'attachment',
                            'description': f'Embedded file: {attachment}',
                            'location': 'PDF attachment',
                            'extractable': True
                        })
        
        except Exception as e:
            self.logger.error(f"Error extracting from PDF {file_path}: {e}")
        
        return embedded_items
    
    def extract_from_docx(self, file_path: str) -> List[Dict[str, Any]]:
        """Extract images and embedded content from DOCX files"""
        embedded_items = []
        
        try:
            doc = Document(file_path)
            
            # Extract images
            for rel in doc.part.rels.values():
                if "image" in rel.target_ref:
                    embedded_items.append({
                        'type': 'image',
                        'description': f'Embedded image: {rel.target_ref}',
                        'location': 'DOCX embedded',
                        'extractable': True,
                        'target_ref': rel.target_ref
                    })
            
            # Extract text content info
            full_text = []
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():
                    full_text.append(paragraph.text)
            
            if full_text:
                embedded_items.append({
                    'type': 'text_content',
                    'description': f'Document text ({len(" ".join(full_text))} characters)',
                    'location': 'DOCX paragraphs',
                    'extractable': True
                })
        
        except Exception as e:
            self.logger.error(f"Error extracting from DOCX {file_path}: {e}")
        
        return embedded_items
    
    def extract_from_xlsx(self, file_path: str) -> List[Dict[str, Any]]:
        """Extract embedded content from Excel files"""
        embedded_items = []
        
        try:
            workbook = load_workbook(file_path)
            
            # Check for images in worksheets
            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                
                # Check for embedded images
                if hasattr(sheet, '_images') and sheet._images:
                    for img in sheet._images:
                        embedded_items.append({
                            'type': 'image',
                            'description': f'Embedded image in sheet: {sheet_name}',
                            'location': f'Excel sheet: {sheet_name}',
                            'extractable': True
                        })
                
                # Get data summary
                max_row = sheet.max_row
                max_col = sheet.max_column
                if max_row > 1 or max_col > 1:
                    embedded_items.append({
                        'type': 'data_content',
                        'description': f'Spreadsheet data: {max_row} rows, {max_col} columns',
                        'location': f'Excel sheet: {sheet_name}',
                        'extractable': True
                    })
        
        except Exception as e:
            self.logger.error(f"Error extracting from Excel {file_path}: {e}")
        
        return embedded_items
    
    def extract_from_zip(self, file_path: str) -> List[Dict[str, Any]]:
        """Extract content list from ZIP files"""
        embedded_items = []
        
        try:
            with zipfile.ZipFile(file_path, 'r') as zip_file:
                for file_info in zip_file.filelist:
                    embedded_items.append({
                        'type': 'archived_file',
                        'description': f'File: {file_info.filename} ({file_info.file_size} bytes)',
                        'location': 'ZIP archive',
                        'extractable': True,
                        'filename': file_info.filename,
                        'size': file_info.file_size
                    })
        
        except Exception as e:
            self.logger.error(f"Error extracting from ZIP {file_path}: {e}")
        
        return embedded_items
    
    def extract_embedded_content(self, file_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract embedded content based on file type"""
        file_path = file_info['path']
        extension = file_info['extension']
        embedded_content = []
        
        try:
            if extension == '.pdf':
                embedded_content = self.extract_from_pdf(file_path)
            elif extension == '.docx':
                embedded_content = self.extract_from_docx(file_path)
            elif extension in ['.xlsx', '.xls']:
                embedded_content = self.extract_from_xlsx(file_path)
            elif extension == '.zip':
                embedded_content = self.extract_from_zip(file_path)
            elif extension in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff']:
                # For image files, get basic metadata
                try:
                    with Image.open(file_path) as img:
                        embedded_content.append({
                            'type': 'image_metadata',
                            'description': f'Image: {img.format}, {img.size}, {img.mode}',
                            'location': 'Image file',
                            'extractable': False
                        })
                        
                        # Check for EXIF data
                        if hasattr(img, '_getexif') and img._getexif():
                            embedded_content.append({
                                'type': 'exif_data',
                                'description': 'EXIF metadata available',
                                'location': 'Image EXIF',
                                'extractable': True
                            })
                except:
                    pass
        
        except Exception as e:
            self.logger.error(f"Error extracting embedded content from {file_path}: {e}")
        
        return embedded_content
    
    def analyze_and_extract(self) -> Dict[str, Any]:
        """Main method to analyze RAR file and extract all content"""
        results = {
            'rar_file': self.rar_path,
            'extraction_successful': False,
            'total_files': 0,
            'files': [],
            'summary': {
                'file_types': {},
                'total_embedded_items': 0,
                'embedded_types': {}
            }
        }
        
        # Extract RAR file
        if not self.extract_rar():
            return results
        
        results['extraction_successful'] = True
        
        # Scan all extracted files
        files_info = self.scan_directory(self.output_dir)
        results['total_files'] = len(files_info)
        
        # Process each file
        for file_info in files_info:
            # Extract embedded content
            embedded_content = self.extract_embedded_content(file_info)
            file_info['embedded_content'] = embedded_content
            
            # Update summary statistics
            ext = file_info['extension'] or 'no_extension'
            results['summary']['file_types'][ext] = results['summary']['file_types'].get(ext, 0) + 1
            
            results['summary']['total_embedded_items'] += len(embedded_content)
            
            for item in embedded_content:
                item_type = item['type']
                results['summary']['embedded_types'][item_type] = results['summary']['embedded_types'].get(item_type, 0) + 1
            
            results['files'].append(file_info)
        
        return results
    
    def save_results(self, results: Dict[str, Any], output_file: str = None):
        """Save analysis results to JSON file"""
        if not output_file:
            output_file = f"{self.rar_path}_analysis.json"
        
        # Convert Path objects to strings for JSON serialization
        json_results = json.loads(json.dumps(results, default=str))
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(json_results, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"Results saved to: {output_file}")
    
    def print_summary(self, results: Dict[str, Any]):
        """Print a formatted summary of the analysis"""
        print("\n" + "="*60)
        print(f"RAR FILE ANALYSIS SUMMARY")
        print("="*60)
        print(f"RAR File: {results['rar_file']}")
        print(f"Extraction Successful: {results['extraction_successful']}")
        print(f"Total Files Found: {results['total_files']}")
        
        print(f"\nFile Types:")
        for ext, count in results['summary']['file_types'].items():
            print(f"  {ext}: {count} files")
        
        print(f"\nEmbedded Content Summary:")
        print(f"Total Embedded Items: {results['summary']['total_embedded_items']}")
        for content_type, count in results['summary']['embedded_types'].items():
            print(f"  {content_type}: {count} items")
        
        print(f"\nDetailed File List:")
        print("-" * 60)
        
        for file_info in results['files']:
            print(f"\nFile: {file_info['name']}")
            print(f"  Path: {file_info['relative_path']}")
            print(f"  Size: {file_info['size']} bytes")
            print(f"  Type: {file_info['extension']} ({file_info['detected_type']})")
            
            if file_info['embedded_content']:
                print(f"  Embedded Content:")
                for item in file_info['embedded_content']:
                    print(f"    - {item['type']}: {item['description']}")
                    print(f"      Location: {item['location']}")
                    print(f"      Extractable: {item['extractable']}")


# Usage example
def main():
    """Main function to demonstrate usage"""
    import sys
    
    if len(sys.argv) < 2:
        print("Usage: python rar_analyzer.py <path_to_rar_file> [output_directory]")
        sys.exit(1)
    
    rar_path = sys.argv[1]
    output_dir = sys.argv[2] if len(sys.argv) > 2 else None
    
    # Create analyzer instance
    analyzer = RARAnalyzer(rar_path, output_dir)
    
    # Perform analysis
    print("Starting RAR file analysis...")
    results = analyzer.analyze_and_extract()
    
    # Print summary
    analyzer.print_summary(results)
    
    # Save results
    analyzer.save_results(results)
    
    print(f"\nAnalysis complete! Results saved and extraction directory: {analyzer.output_dir}")

if __name__ == "__main__":
    main()
